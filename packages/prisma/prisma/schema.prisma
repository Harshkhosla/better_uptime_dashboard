// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(uuid())
  email   String   @unique
  name    String?
  password String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  websites  Website[] @relation("UserWebsites")
  regions   Region[]  @relation("UserRegions") 
  userDetails UserDetails?  @relation("UserDetails")
  userDetailsFilled Boolean?
  userDemoGraphs UserDemoGraph[] @relation("UserDemoGraphs")
  mealPlans         MealPlan[]
  chatHistory       ChatHistory[]
  weightHistory     WeightHistory[]
}


model MealPlan {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedAt    DateTime    @default(now())
  numberOfDays   Int         @default(7)
  isActive       Boolean     @default(true)
  userInput      Json        // Store the input parameters used for generation
  mealStructure  Json        // Store the meal structure configuration
  days           MealDay[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  @@index([userId, isActive])
}

model MealDay {
  id         String   @id @default(uuid())
  mealPlanId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  date       DateTime
  meals      Meal[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([mealPlanId, date])
}

model Meal {
  id              String      @id @default(uuid())
  mealDayId       String
  mealDay         MealDay     @relation(fields: [mealDayId], references: [id], onDelete: Cascade)
  externalId      String      // The ID from LLM response (e.g., "1", "2", etc.)
  name            String
  type            String      // breakfast, snack, lunch, dinner
  calories        Int
  protein         Float
  carbs           Float
  fats            Float
  time            String
  isCompleted     Boolean     @default(false)
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([mealDayId, type])
}

model ChatHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // "user" or "assistant"
  content   Json     // Store the message content
  metadata  Json?    // Store additional context (userDetails, mealPlan generated, etc.)
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
}

model WeightHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  weight    Float
  goal      Float?
  note      String?  // Optional note about the weigh-in
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, date])
  @@unique([userId, date]) // Prevent duplicate entries for same date
}

model UserDetails {
  id    String @id @default(uuid())
  owner       User     @relation("UserDetails", fields: [ownerId], references: [id])
  age     Int
  weight Int
  height  Int
  goalWeight  Int?
  bmi  Int
  preferences String 
  ownerId     String @unique
}

model UserDemoGraph{
  id String @id @default(uuid())
  owner       User     @relation("UserDemoGraphs", fields: [ownerId], references: [id])
  progress String 
  ownerId String 
}
model NotificationPreference {
  id          String  @id @default(uuid())
  notifyCall  Boolean @default(false)
  notifySMS   Boolean @default(false)
  notifyEmail Boolean @default(false)
  notifyPush  Boolean @default(false)
  websites    Website[]
}

model Website{
  id  String @id @default(uuid())
  url String
  timeAdded DateTime
  uptime DateTime?
  incident Int?@default(0)
  websiteStatus WebsiteStatus[]
  alert  String?
  acknowledge       String?
  escalationPolicy  String?
  notificationPref  NotificationPreference? @relation(fields: [notificationPrefId], references: [id])
  notificationPrefId String?
  owner       User      @relation("UserWebsites", fields: [ownerId], references: [id])
  ownerId     String
}
model WebsiteStatus{
   id  String @id @default(uuid())
   responseTime  Int
   statusCheck statusCheck
   region Region @relation(fields: [regionId],references: [id])
   regionId String
   website Website @relation(fields: [websiteId],references: [id])
   websiteId String
   timestamp DateTime?
}

model Region {
  id    String           @id @default(uuid())
  name  String
  websiteStatuses WebsiteStatus[]
  users   User[]    @relation("UserRegions")
}

enum statusCheck{
  Up
  DOWN
  UNKNONE
}